DISCLAIMER :  I haven't actually had the time to test this program on another laptop than mine. (Intel i&-4710HQ 2.5GHz, 16GB RAM, windows installed on 120GB SSD, Nvidia G870M). I asked someone to compile it on his machine and let's just say it didn't end up well. The competition rules didn't mention anything about optimisation and OS. When asked about the rules, prof. Sanella told me that as long my fractal is generated using Haskell, it's fine.
The program actually "works" on Windows 7 (I say "works" because it does and doesn't - it generates the image, but for some reason I couldn't figure, the window freezes and may lag the computer - it may be due to a stack overflow) if you follow these steps :
- compile the program using ghc --make Base.hs (in CMD.exe, in the folder where winghci is installed);
- two windows will open (hopefully) - a smaller one and a bigger one;
- DO NOT CLICK THE BIG ONE - if you do, don't blame me if your computer crashes;
- wait anywhere around 1-2 minutes to like 10 minutes for it to compile (depending on the number of iterations, function used, bound, coloring method chosen);
- you should be able to see the fractal on the big window - again do not click inside the window;
- to close the program just close the smaller window;

The archive contains different Julia Sets generated by my program for different functions and parameters from settings (part of them are mentioned in the name of the picture, the rest are mentioned in Base.hs).
Using the current settings, the image I like most should be generated, but if it doesn't work, just feel free to choose any of the images provided if it has the potential to improve my ranking. (I've put some images starting with Fail to exemplify some of the functions' output).
I've tried to explain as thoroughly as possible how everything works in my program (the comments from Base.hs) (except how OpenGL operates, because I am not exactly sure even now). In short : 
- You modify the constants in the Settings section in Base.hs (some combinations may not work - I've tried to provide all the combinations that generated my images);
- You choose the coloring method; (in the case of coLO(G)ring, you have to modify the base of logBase e.g z^2 -- logBase 2, z^5 -- logBase 5);
